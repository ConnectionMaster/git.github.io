---
title: Git Rev News Edition 119 (January 31st, 2025)
layout: default
date: 2025-01-31 12:06:51 +0100
author: chriscool
categories: [news]
navbar: false
---

## Git Rev News: Edition 119 (January 31st, 2025)

Welcome to the 119th edition of [Git Rev News](https://git.github.io/rev_news/rev_news/),
a digest of all things Git. For our goals, the archives, the way we work, and how to contribute or to
subscribe, see [the Git Rev News page](https://git.github.io/rev_news/rev_news/) on [git.github.io](http://git.github.io).

This edition covers what happened during the months of December 2024 and January 2025.

## Discussions

<!---
### General
-->

<!---
### Reviews
-->


### Support

+ [git support for "xattrs" (extended filesystem attributes)?](https://lore.kernel.org/git/5b4c09a9-64bb-e672-e604-120563fc1ad6@das-werkstatt.com/)

  Peter B. asked on the Git mailing list if there was a way to store
  [extended attributes (xattrs)](https://en.wikipedia.org/wiki/Extended_file_attributes)
  in Git. His use case was professional archival collection and he
  needed bit-proof preservation of all xattrs, even larger ones.

  Junio Hamano, the Git maintainer, replied that Git only tracks
  "contents, pathnames where these contents are stored, and the
  executable bit".

  Jeff King, alias Peff, also replied to Peter confirming that Git,
  like most other version control systems, doesn't store most
  metadata, but pointing to other tools,
  [etckeeper](https://etckeeper.branchable.com/) and
  [metastore](https://github.com/przemoc/metastore), that can help
  with storing them in a separate file and restoring them on checkout.

  Junio agreed with Peff that Git is extensible that way.

  brian m. carlson replied to Peter mentioning other
  possibilities. One is to use the `.gitattributes` files to store a
  few xattrs with values that are "well stored as text", and then
  `git ls-attr` and a `post-checkout`
  [hook](https://git-scm.com/book/ms/v2/Customizing-Git-Git-Hooks)
  to restore them.

  Another possibility is to use
  [mtree](https://linux.die.net/man/8/mtree) utilities to store or
  restore metadata from or into mtree files. brian especially pointed
  to [go-mtree](https://github.com/vbatts/go-mtree) which supports
  xattrs. As `mtree` is an extensible key-value format, brian uses it
  to store the install location of his
  [dotfiles](https://en.wikipedia.org/wiki/Hidden_file_and_hidden_directory).

  Peter replied to brian thanking everyone for the suggestions and
  saying he would especially take a look at `mtree` and
  `metastore`. He thanked brian again in the following message,
  saying that `go-mtree` looked very promising and that he was going
  to look at `post-checkout` hooks.

## Developer Spotlight: Justin Tobler

* Who are you and what do you do?

  My name is Justin Tobler and I am a relatively new contributor to the
  Git project with my first contributions being made this last year. I
  work at GitLab and these days spend my time integrating Git into
  GitLab's data access layer as well as upstreaming Git fixes/features.

* What would you name your most important contribution to Git?

  Most of my contributions thus far have been relatively minor bug fixes,
  but [one bug I found](https://public-inbox.org/git/pull.1683.git.1709669025722.gitgitgadget@gmail.com/)
  particularly interesting was with the table compaction algorithm in the
  new reftable reference backend. There was a theoretical scenario where
  certain Git operations could be performed and new tables written, but
  table compaction would never occur. This was found when tests on certain
  platforms started failing because of file descriptor limits being exceeded.

* What are you doing on the Git project these days, and why?

  One topic I'm currently working on is introducing a way to
  [generate batches of specific blob diffs](https://public-inbox.org/git/20241213042312.2890841-1-jltobler@gmail.com/).
  This is not particularly useful for users, but for Git servers
  it's a nice feature.

  I still have much to learn about the project so I also enjoy looking
  into the inflight topics that pop on the mailing list.

* If you could remove something from Git without worrying about
  backwards compatibility, what would it be?

  I don't have anything specific in mind, but it would probably be along
  the lines of changes to make the Git CLI more consistent across its
  various commands.

* What is your favorite Git-related tool/library, outside of
  Git itself?

  For my Git-related workflow, outside of GitLab, I primarily use the Git
  CLI for everything.

* What is your toolbox for interacting with the mailing list and for
  development of Git?

  For interacting with the mailing list my workflow primarily consists of
  using [`neomutt`](https://neomutt.org/guide/gettingstarted.html)
  and `git send-email`, but I have also recently been
  exploring [`b4`](https://github.com/mricon/b4).

  For development, I use [`neovim`](https://neovim.io) as my editor with
  an assortment of plugins.

* What is your advice for people who want to start Git development?
  Where and how should they start?

  If you are unfamiliar with the mailing workflow, [GitGitGadget](https://gitgitgadget.github.io/)
  can help handle formatting patches and sending them off to the mailing
  list. My first couple of patch series used this tool and I found it
  useful to get started without having to be super familiar with
  `git format-patch` and `git send-email`. Other than that, I also
  find it very helpful to observe how other contributors submit
  patches and interact on the mailing list.

* If there's one tip you would like to share with other Git
  developers, what would it be?

  I appreciate when the authors of a patch series provide as much
  background as possible to the change being made. Reading incoming patch
  series is a great way to learn about the project and it is very helpful
  when the required context overhead is minimized.


## Other News

__Various__

* [Highlights from Git 2.48](https://github.blog/open-source/git/highlights-from-git-2-48/)
  by Taylor Blau on GitHub Blog, about
  faster SHA-1 computations for checksums, adding option `--remerge-diff` to the `git range-diff` command,
  memory-leak-free tests, introducing the Meson build system, and more.
* [What’s new in Git 2.48.0?](https://about.gitlab.com/blog/2025/01/10/whats-new-in-git-2-48-0/)
  by Christian Couder on GitLab Blog, about
  the Meson build system, Git becoming memory-leak-free, improved bundle URI checks,
  adding reference consistency checks, more performant 'reftables' implementation,
  support for reflogs in `git-refs migrate` (to migrate to 'reftables'),
  the 'ref-filter' subsystem optimizations, and more.
* [Git security vulnerabilities announced](https://github.blog/open-source/git/git-security-vulnerabilities-announced-5/)
  by Taylor Blau on GitHub Blog:
  [CVE-2024-50349](https://nvd.nist.gov/vuln/detail/CVE-2024-50349) (ANSI escape sequences in hostname and prompt for interactive credentials) and
  [CVE-2024-52006](https://nvd.nist.gov/vuln/detail/CVE-2024-52006) (specially-crafted repository URL and credential helpers).
    * See also [Clone2Leak: Your Git Credentials Belong To Us](https://flatt.tech/research/posts/clone2leak-your-git-credentials-belong-to-us/)
      by RyotaK (@ryotkak), a security engineer at GMO Flatt Security Inc.
* Adam Johnson’s book “Boost Your Git DX”
  [has been updated](https://adamj.eu/tech/2025/01/28/bygdx-second-update/)
  with 28 new pages of content. This book was first mentioned in
  [Git Rev News Edition #104](https://git.github.io/rev_news/2023/10/31/edition-104/).


__Light reading__

* [Off-the-shelf governance models for small FOSS projects?](https://antonin.delpeuch.eu/posts/off-the-shelf-governance-models-for-small-foss-projects/)
  by Antonin Delpeuch, about an idea for `GOVERNANCE.md` file template or generator,
  as another recommended addition to `README.md`, `LICENSE`, and Code of Conduct.
  Mergiraf's [`GOVERNANCE.md`](https://codeberg.org/mergiraf/mergiraf/src/branch/main/GOVERNANCE.md)
  is his example - the goal here is to make it clear for project users
  what one can do if there is an issue/bug, or if one wants to add a new feature to a project.
* [Re: DCO](https://inbox.sourceware.org/gdb/Z5esfoH+wMxmDyRP@ebb.org/)
  by Bradley M. Kuhn of Software Freedom Conservancy on GDB Development mailing list (via GDB public-inbox instance), 
  about the considerations when adopting the Developer Certificate of Origin for a project (similarly to the Linux kernel and Git).
* [The many names of commit 55039832f98c](https://lwn.net/Articles/1005222/)
  by Jonathan Corbet on LWN\.net, about difficulties finding the commit in mainline kernel repository
  that corresponds to the specific commit/patch sent to the stable-update mailing list,
  in the presence of DRM community's wide use of cherry-picking
  (without something like "change ID" that is used by Gerrit).
* [The slow death of TuxFamily](https://lwn.net/Articles/1004988/), a French free-software-hosting service,
  by Joe Brockmeier on LWN\.net.
* [A Retrospective on the Source Code Control System](https://www.mrochkind.com/mrochkind/docs/SCCSretro2.pdf)
  by Marc J. Rochkind (PDF).
* [Considerations for making a tree view component (in a web Git UI) accessible](https://github.blog/engineering/user-experience/considerations-for-making-a-tree-view-component-accessible/)
  by Eric Bailey on GitHub Blog.
* [Commit subject case in Git history](https://benknoble.github.io/blog/2025/01/04/git-subject-case/)
  analysis by D. Ben Knoble, as a blog post on his Junk Drawer site.
* [Colliding with the SHA prefix of Linux's initial Git commit](https://people.kernel.org/kees/colliding-with-the-sha-prefix-of-linuxs-initial-git-commit)
  Or, how to break all the tools that parse the “Fixes:” tag,
  by Kees Cook on people\.kernel\.org.  Note that the 12-character prefix collision
  was generated with the help of the [lucky-commit](https://github.com/not-an-aardvark/lucky-commit) project;
  this tool was mentioned in [Git Rev News Edition #109](https://git.github.io/rev_news/2024/03/31/edition-109/).
    * See also [Facing the Git commit-ID collision catastrophe](https://lwn.net/Articles/1001526/)
      by Jonathan Corbet on LWN\.net, mentioned in [the previous edition](https://git.github.io/rev_news/2024/12/31/edition-118/).
* [How to set up your ~~own Git server~~ Gitea instance at home for your personal projects](https://www.xda-developers.com/set-up-your-own-git-server-at-home/)
  by Ty Sherback on XDA Developers.
    * [Gitea](https://about.gitea.com/), a Go-based software forge (fork of [Gogs](https://gogs.io/)),
      was first mentioned in [Git Rev News Edition #23](https://git.github.io/rev_news/2017/01/25/edition-23/).
      There is also [Forgejo](https://forgejo.org/), a fork of Gitea,
      mentioned in [Git Rev News Edition #114](https://git.github.io/rev_news/2024/08/31/edition-114/).
* [Is there a way to split the git history of a file or combine the histories of two files without a merge commit?](https://devblogs.microsoft.com/oldnewthing/20241218-00/?p=110655),
  a short exploration by Raymond Chen on The Old New Thing, part of Microsoft Dev Blogs.
    * Some of the other blog posts referenced in the above-mentioned exploration also made their appearance in Git Rev News:
      [Mundane git tricks: Combining two files into one while preserving line history](https://devblogs.microsoft.com/oldnewthing/20190514-00/?p=102493)
      was mentioned in [Edition #51](https://git.github.io/rev_news/2019/05/22/edition-51/).
      [How do I split a file into two while preserving git line history?](https://devblogs.microsoft.com/oldnewthing/20190916-00/?p=102892)
      was not present, but the related
      [How to split off an older copy of a file while preserving git line history](https://devblogs.microsoft.com/oldnewthing/20230728-00/?p=108498)
      appeared in [Edition #104](https://git.github.io/rev_news/2023/10/31/edition-104/).
* [Edit commit message with git reword (`git commit --fixup:reword=<commit>`)](https://www.brandonpugh.com/til/git/edit-commit-message-with-reword/)
  in Brandon Pugh's TILs: Today I learned... (2024).
* [How I use git worktrees](https://notes.billmill.org/blog/2024/03/How_I_use_git_worktrees.html)
  (with the help of custom [worktree](https://github.com/llimllib/personal_code/blob/daab9eb1/homedir/.local/bin/worktree#L1) script)
  by Bill Mill on their blog (2024).
    * See also [How I Use Git Worktrees](https://matklad.github.io/2024/07/25/git-worktrees.html)
      by Alex Kladov (matklad) on his GitHub Pages-based blog,
      mentioned in [Git Rev News Edition #113](https://git.github.io/rev_news/2024/07/31/edition-113/).
* [Git Trailers](https://alchemists.io/articles/git_trailers) by Brooke Kuhlmann
  was mentioned in [Git Rev News Edition #108](https://git.github.io/rev_news/2024/02/29/edition-108/),
  but was since then updated.

<!---
__Easy watching__
-->

__Git tools and sites__

* [Project Harmony (Harmony Agreements)](https://www.harmonyagreements.org/)
  is a community-centered group focused on _contributor agreements_
  for free and open source software (FOSS).
* [todo-md](https://codeberg.org/lig/todo-md) is a pre-commit hook written in Bash
  that automatically maintains a `TODO.md` file in your repository.
  It collects `TODO:` comments from your code and organizes them into a Markdown file,
  making it easy to track tasks and improvements.
  Under MIT license.
* [Yek](https://github.com/bodo-run/yek) (يک) is a fast Rust based tool
  to serialize (selected) text-based files in a repository or directory
  into a single file meant for LLM consumption.  Mentions similar projects.
  Under MIT license.


## Releases

+ Git [2.48.1 and friends (security releases)](https://public-inbox.org/git/xmqq5xmh46oc.fsf@gitster.g/),
[2.48.0](https://public-inbox.org/git/xmqqplku7cvm.fsf@gitster.g/),
[2.48.0-rc2](https://public-inbox.org/git/xmqqbjwjyalr.fsf@gitster.g/)
+ Git for Windows [2.47.1(2) (security release)](https://github.com/git-for-windows/git/releases/tag/v2.47.1.windows.2),
[2.48.0-rc2(1)](https://github.com/git-for-windows/git/releases/tag/v2.48.0-rc2.windows.1)
+ GitLab [17.8.1, 17.7.3, 17.6.4](https://about.gitlab.com/releases/2025/01/22/patch-release-gitlab-17-8-1-released/),
[17.8](https://about.gitlab.com/releases/2025/01/16/gitlab-17-8-released/),
[17.7.2](https://about.gitlab.com/releases/2025/01/15/gitlab-17-7-2-released/),
[17.7.1, 17.6.3, 17.5.5](https://about.gitlab.com/releases/2025/01/08/patch-release-gitlab-17-7-1-released/)
+ Gerrit Code Review [3.10.4](https://www.gerritcodereview.com/3.10.html#3104),
[3.11.1](https://www.gerritcodereview.com/3.11.html#3111),
[3.9.9](https://www.gerritcodereview.com/3.9.html#399)
+ GitHub Enterprise [3.15.2](https://help.github.com/enterprise-server@3.15/admin/release-notes#3.15.2),
[3.14.7](https://help.github.com/enterprise-server@3.14/admin/release-notes#3.14.7),
[3.13.10](https://help.github.com/enterprise-server@3.13/admin/release-notes#3.13.10),
[3.12.14](https://help.github.com/enterprise-server@3.12/admin/release-notes#3.12.14)
+ GitKraken [10.6.3](https://help.gitkraken.com/gitkraken-client/current/),
[10.6.2](https://help.gitkraken.com/gitkraken-client/current/),
[10.6.1](https://help.gitkraken.com/gitkraken-client/current/)
+ GitHub Desktop [3.4.15](https://desktop.github.com/release-notes/),
[3.4.14](https://desktop.github.com/release-notes/),
[3.4.13](https://desktop.github.com/release-notes/)
+ Garden [2.0.0](https://github.com/garden-rs/garden/releases/tag/v2.0.0),
[1.10.1](https://github.com/garden-rs/garden/releases/tag/v1.10.1)
+ Git Cola [4.11.0](https://github.com/git-cola/git-cola/releases/tag/v4.11.0)
+ GitButler [0.14.6](https://github.com/gitbutlerapp/gitbutler/releases/tag/release/0.14.6),
[0.14.5](https://github.com/gitbutlerapp/gitbutler/releases/tag/release/0.14.5)

## Credits

This edition of Git Rev News was curated by
Christian Couder &lt;<christian.couder@gmail.com>&gt;,
Jakub Narębski &lt;<jnareb@gmail.com>&gt;,
Markus Jansen &lt;<mja@jansen-preisler.de>&gt; and
Kaartic Sivaraam &lt;<kaartic.sivaraam@gmail.com>&gt;
with help from Justin Tobler, D. Ben Knoble,
Brandon Pugh, Štěpán Němec and Adam Johnson.
